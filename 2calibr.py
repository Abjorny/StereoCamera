import os
import cv2
import numpy as np

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ ===
rows = 6
columns = 9
square_size = 1.5  # –í —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
image_size = (640, 280)
total_photos = 30

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ—á–µ–∫ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ ===
objp = np.zeros((rows * columns, 3), np.float32)
objp[:, :2] = np.mgrid[0:columns, 0:rows].T.reshape(-1, 2)
objp *= square_size

# === –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫ ===
objpoints = []  # 3D —Ç–æ—á–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
imgpointsL = []  # 2D —Ç–æ—á–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–µ–≤–æ–π –∫–∞–º–µ—Ä—ã
imgpointsR = []

# === –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ===
image_folder = os.path.join(os.path.dirname(__file__), 'calibration_images')

print("üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
print("üì∑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑:", image_folder)

successful = 0
for i in range(1, total_photos + 1):
    left_path = os.path.join(image_folder, f'left_{i}.png')
    right_path = os.path.join(image_folder, f'right_{i}.png')

    if not (os.path.exists(left_path) and os.path.exists(right_path)):
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—Ä–∞ ‚Ññ{i} ‚Äî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        continue

    imgL = cv2.imread(left_path)
    imgR = cv2.imread(right_path)

    grayL = cv2.cvtColor(imgL, cv2.COLOR_BGR2GRAY)
    grayR = cv2.cvtColor(imgR, cv2.COLOR_BGR2GRAY)

    retL, cornersL = cv2.findChessboardCorners(grayL, (columns, rows), None)
    retR, cornersR = cv2.findChessboardCorners(grayR, (columns, rows), None)

    if retL and retR:
        objpoints.append(objp)
        corners2L = cv2.cornerSubPix(grayL, cornersL, (11,11), (-1,-1),
                                     criteria=(cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001))
        corners2R = cv2.cornerSubPix(grayR, cornersR, (11,11), (-1,-1),
                                     criteria=(cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001))
        imgpointsL.append(corners2L)
        imgpointsR.append(corners2R)
        successful += 1
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ —à–∞—Ö–º–∞—Ç–∫–∞ –Ω–∞ –ø–∞—Ä–µ ‚Ññ{i}")
    else:
        print(f"‚ùå –®–∞—Ö–º–∞—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–∞—Ä–µ ‚Ññ{i}")

print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä: {successful}/{total_photos}")
if successful < 3:
    print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏. –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 3.")
    exit()

# === –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–∞–º–µ—Ä ===
retL, mtxL, distL, _, _ = cv2.calibrateCamera(objpoints, imgpointsL, image_size, None, None)
retR, mtxR, distR, _, _ = cv2.calibrateCamera(objpoints, imgpointsR, image_size, None, None)

# === –°—Ç–µ—Ä–µ–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ ===
flags = cv2.CALIB_FIX_INTRINSIC
criteria = (cv2.TERM_CRITERIA_MAX_ITER + cv2.TERM_CRITERIA_EPS, 100, 1e-5)

_, _, _, _, _, R, T, E, F = cv2.stereoCalibrate(
    objpoints, imgpointsL, imgpointsR,
    mtxL, distL, mtxR, distR,
    image_size, criteria=criteria, flags=flags
)

# === –†–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ===
R1, R2, P1, P2, Q, _, _ = cv2.stereoRectify(
    mtxL, distL, mtxR, distR, image_size, R, T, alpha=0
)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
np.savez("stereo_params.npz",
         mtxL=mtxL, distL=distL,
         mtxR=mtxR, distR=distR,
         R=R, T=T, E=E, F=F,
         R1=R1, R2=R2, P1=P1, P2=P2, Q=Q)

print("\n‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stereo_params.npz")
